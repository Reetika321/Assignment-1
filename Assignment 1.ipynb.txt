{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d88c6f09-806e-480e-9225-fa1ab22de171",
   "metadata": {},
   "outputs": [],
   "source": [
    "# swap the values of these integers\n",
    "x=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "598cb57f-afd8-452d-9997-8d1f4047b7b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "91572f13-65be-493a-8c64-9b6263c6177e",
   "metadata": {},
   "outputs": [],
   "source": [
    "z=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cb258ddd-4ba4-42e5-85cb-6213a486d032",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b284b2ed-0c17-4e43-93d6-3e23ce174508",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c5d360c6-5eca-4105-b740-0e67f7e1b58e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    }
   ],
   "source": [
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "180c2b48-e01b-42b7-a6ff-6c42f605f7f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d06e052a-9345-447c-9744-5f33909f4539",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the area of rectangular\n",
    "length=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "da19bcf8-f455-4d17-9233-8af00a35bb3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "base=50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "16a50405-c947-46e4-b4f3-d41173519af0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Area=(length*base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a950c78a-87d6-4583-91f5-57b5deeeea35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500\n"
     ]
    }
   ],
   "source": [
    "print(Area)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f473bd9b-01fd-4c60-b9dd-1ac60acd1600",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert temperatures from celcius to fahrenheit\n",
    "celcius= 56"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2286fa63-9966-4627-b42d-cd17d8278921",
   "metadata": {},
   "outputs": [],
   "source": [
    "fahrenheit=celcius*9/5+32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f2b965ec-a84d-4867-9202-ace7f0a2fd97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "132.8"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fahrenheit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4780dfed-6708-4ba8-aab2-3083a9bb18f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print length of a string\n",
    "str=\"this is my first python class and it's intresting.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6b4d5564-83f5-4f6c-bdfd-993e88edcbca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b4055144-4fb2-47f9-816a-3ef4c59b777a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the number of vowels\n",
    "str = \"He is the back benchors. He is too much studious.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "cc599786-ffc0-48d2-80e1-00d9bf6432e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "vowels = \"a,e,i,o,u\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8306b3fc-298e-4d04-8326-7e0dff1f4c48",
   "metadata": {},
   "outputs": [],
   "source": [
    "count=sum(str.count(vowel)for vowel in vowels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "60966a06-d499-4e68-affd-abbe3bf93e72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "print(count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "140eee43-ae5d-4024-8893-17abea65ceab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reverse the order of characters using string slicing\n",
    "str= \"fabulous\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9d487175-3f93-43be-a19d-402480f020c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'suolubaf'"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "93ca7f4b-5991-43de-8129-212e38d55346",
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove all the spaces in the string\n",
    "g='r e e t i k a'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d470c624-d920-4a77-8c28-0a15a0ee1187",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a k i t e e r'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "63b3b5df-04bb-43f0-9688-e1ee5ece1150",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'reetika'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g.replace(\" \",\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "532f5395-f230-48a9-b3de-ee3493ebd280",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " radar\n"
     ]
    }
   ],
   "source": [
    "a=input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f24a68b1-506d-4dd4-9d80-9b79833bce32",
   "metadata": {},
   "outputs": [],
   "source": [
    "b=a[-1::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7eca3d24-6950-447c-9121-47a980d204fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "palindrome\n"
     ]
    }
   ],
   "source": [
    "if(a==b):\n",
    "    print('palindrome')\n",
    "else:\n",
    "    print('not palindrome')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b642f69-5afe-4254-b81f-fa7aecb3a683",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f522e06f-9383-47d6-b98c-7daf2bd5f757",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

